@use '/src/scss/utils/utils' as utils;
@use '/src/scss/variables/variables' as *;
@use '@scss/mixins/mixins' as mixins;
@use 'sass:map';

$button-padding: utils.rem(12) utils.rem(32);
$button-bg-color-hover-opacity: 0.85;
$button-bg-color-active-opacity: 0.6;
$button-bg-color-transition-duration: 0.1s;
// variant color vars
$button-primary-color: $color-white;
$button-primary-bg-color: $color-primary;

$button-variants: (
  primary: (
    background-color: $button-primary-bg-color,
    color: $button-primary-color,
  ), // placeholder to add more variants
);

// global on hover reduces bg-color opacity with transition
@mixin button-hover($bg-color) {
  &:hover {
    @include mixins.background-color-transition($button-bg-color-transition-duration);

    background-color: rgba($bg-color, $button-bg-color-hover-opacity);
  }
}
// global active reduces bg-color opacity with transition
@mixin button-active($bg-color) {
  &:active {
    background-color: rgba($bg-color, $button-bg-color-active-opacity);
  }
}

.button {
  padding: $button-padding;
  @each $variant, $options in $button-variants {
    &--#{$variant} {
      @include button-hover(map.get($options, background-color));
      @include button-active(map.get($options, background-color));

      background-color: map.get($options, background-color);
      color: map.get($options, color);
    }
  }
}
